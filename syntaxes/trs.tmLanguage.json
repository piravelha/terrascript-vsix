{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "TerraScript",
	"patterns": [
		{
			"name": "punctuation.other",
            "begin": "(?=item)",
            "end": "$",
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "\\b(item)\\b"
                },
                {
                    "name": "entity.name.type.interface",
                    "match": "\\b([A-Z_][a-zA-Z_0-9]*)\\b(?=:)"
                },
                {
                    "name": "entity.name.type",
                    "match": "\\b([a-zA-Z_][a-zA-Z_0-9]*)\\b"
                }
            ]
		},
        {
            "include": "#storages"
        },
        {
            "name": "entity.name.function",
            "match": "\\b([a-z\\-]+)\\b(?=\\s*=>)"
        },
        {
            "name": "storage.modifier",
            "match": "=>"
        },
        {
            "include": "#config-block"
        },
        {
            "include": "#recipe_block"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#string"
        },
        {
            "include": "#number"
        },
        {
            "include": "#boolean"
        },
        {
            "include": "#variables"
        }
	],
	"repository": {
        "string": {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "boolean": {
            "name": "constant.language",
            "match": "\\b(true|false)\\b"
        },
        "number": {
            "name": "constant.numeric",
            "match": "\\b(\\d+(\\.\\d+)?)\\b"
        },
        "enum": {
            "name": "variable.other.constant",
            "match": "\\b([A-Z_][a-zA-Z_0-9]*)\\b"
        },
        "config-block": {
            "name": "punctuation.other",
            "begin": "(?=\\b(config)\\b)",
            "end": "(?<=\\b(end)\\b)",
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "\\b(config|end)\\b"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#boolean"
                },
                {
                    "include": "#enum"
                },
                {
                    "name": "entity.name.type",
                    "match": "\\b([a-z\\-]+)\\b(?=\\s*:)"
                }
            ]
        },
        "recipe_block": {
            "name": "punctuation.other",
            "begin": "(?=\\b(recipe)\\b)",
            "end": "(?<=\\b(end)\\b)",
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "\\b(recipe|end)\\b"
                },
                {
                    "include": "#number"
                },
                {
                    "name": "variable.other.constant",
                    "match": "(?<=@\\s*)\\b([A-Z_][a-zA-Z_0-9]*)\\b"
                },
                {
                    "name": "entity.name.type",
                    "match": "(?<=\\+\\s*)\\b([A-Z_][a-zA-Z_0-9]*)\\b"
                },
                {
                    "name": "keyword.control.less",
                    "match": "@"
                },
                {
                    "name": "storage.modifier",
                    "match": "\\+"
                }
            ]
        },
        "types": {
            "name": "entity.name.type",
            "match": "\\b([A-Z_][a-zA-Z_0-9]*)\\b"  
        },
        "keywords": {
            "name": "keyword.control",
            "match": "\\b(end|if|then|config|recipe|on-hold|can-alt-function|allow-reforge)\\b"
        },
        "storages": {
            "name": "storage.modifier",
            "match": "\\b(=>|in|chance)\\b|@main\\b"
        },
        "variables": {
            "name": "variable.other",
            "match": "\\b([a-z\\-]+)\\b"
        }
	},
	"scopeName": "source.trs"
}